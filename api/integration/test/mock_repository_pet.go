// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/pet.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/myantyuWorld/animal_healthcate/domain/model"
)

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// TopView mocks base method.
func (m *MockPetRepository) TopView(petId string) (*model.TopInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopView", petId)
	ret0, _ := ret[0].(*model.TopInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopView indicates an expected call of TopView.
func (mr *MockPetRepositoryMockRecorder) TopView(petId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopView", reflect.TypeOf((*MockPetRepository)(nil).TopView), petId)
}
